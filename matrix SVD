#matrix addition
import numpy as np
#create matrices
A =np.array([[1,2], [3,4]])
B =np.array([[5,6], [7,8]])
#Addition
C=A+B
#subtraction
D=A-B
#Multiplication(element-wise)
E=A*B
#Matrix Multiplication
F= np.dot(A, B)#Or A @ B
#Transpose
A_transpose= A.T
print("Addition:")
print(C)
print("\nSubtraction:")
print(D)
print("\nElement-wise Multiplication:")
print(E)
print("\nMatrix Multiplication:")
print(F)
print("\nTranspose:")
print(A_transpose)

print("\n#with SVD")
import numpy as np
X=np.array([[1,2,3],[4,5,6],[7,8,9]])
#perform SVD
U,S,VT= np.linalg.svd(X)
#choose the number of components to keep(e.g.,2)
n_components=2
#Reconstruct the matrix with reduced dimensions
X_reconstructed=np.dot(U[:,:n_components],np.dot(np.diag(S[:n_components]),VT[:n_components,:]))
print("\nOriginal Matrix:")
print(X)
print("\nReconstructed Matrix(with reduced dimensions):")
print(X_reconstructed)



***************************************************************************************

OUTPUT

Addition:
[[ 6  8]
 [10 12]]

Subtraction:
[[-4 -4]
 [-4 -4]]

Element-wise Multiplication:
[[ 5 12]
 [21 32]]

Matrix Multiplication:
[[19 22]
 [43 50]]

Transpose:
[[1 3]
 [2 4]]

#with SVD

Original Matrix:
[[1 2 3]
 [4 5 6]
 [7 8 9]]

Reconstructed Matrix(with reduced dimensions):
[[1. 2. 3.]
 [4. 5. 6.]
 [7. 8. 9.]]
â€‹
